<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * SecretTab
 * 
 * A UI Component that allows one to quickly test the symmetric ciphers
 * made available in the AS3 Crypto library.
 * Copyright (c) 2007 Henri Torgemane
 * 
 * See LICENSE.txt for full license information.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Secret Key" width="100%" height="100%">
	<mx:Label text="Encryption:" left="10" top="10"/>
	<mx:ComboBox id="encType" labelField="@label" left="84" top="8">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="AES" value="aes"/>
			<item label="BlowFish" value="blowfish"/>
			<item label="3DES" value="des3"/>
			<item label="DES" value="des"/>
			<item label="RC4" value="rc4"/>
			<item label="XTEA" value="xtea"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:Label text="Mode:" left="186" top="10"/>
	<mx:ComboBox id="modeType" labelField="@label" left="234" top="8">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="CBC" value="cbc"/>
			<item label="CFB" value="cfb"/>
			<item label="CFB 8" value="cfb8"/>
			<item label="OFB" value="ofb"/>
			<item label="CTR" value="ctr"/>
			<item label="ECB" value="ecb"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:Label text="Note: Modes and paddings are meaningless with RC4" top="36" left="10" width="304"/>
	<mx:Label x="318" y="10" text="Padding:"/> 
	<mx:ComboBox id="paddingType" labelField="@label" x="381" y="8">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="PKCS#5" value="pkcs5"/>
			<item label="NONE" value="null"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:CheckBox id="simple" x="479" y="10" label="Prepend IV to cipher text"
		change="if (simple.selected) {
			iv_title.visible = false;
			iv_blah.visible = false;
			iv.visible = false;
		} else {
			iv_title.visible = true;
			iv_blah.visible = true;
			iv.visible = true;
		}"/>

	<mx:Label x="10" y="62" text="Key Format:"/>
	<mx:ComboBox id="keyFormat" labelField="@label" left="84" top="60">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="Text" value="text"/>
			<item label="Hex" value="hex"/>
			<item label="Base64" value="b64"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:Button click="gen(64)" label="Generate 64 bits" right="415" top="60"/>
	<mx:Button click="gen(128)" label="Generate 128 bits" right="280" top="60"/>
	<mx:Button click="gen(192)" label="Generate 192 bits" right="145" top="60"/>
	<mx:Button click="gen(256)" label="Generate 256 bits" right="10" top="60"/>
	<mx:TextArea id="key" left="10" right="10" top="88" height="25"/>
	<mx:Label text="Initialization Vector:" left="10" bottom="40" id="iv_title"/>
	<mx:TextArea id="iv" height="22" left="10" right="10" bottom="10"/>
	<mx:Label text="Plain Text:" left="10" top="121"/>
	<mx:ComboBox id="inputFormat" labelField="@label" left="84" top="119" change="displayInput()">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="Text" value="text"/>
			<item label="Hex" value="hex"/>
			<item label="Base64" value="b64"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:TextArea id="input" keyDown="currentInput=null" left="10" right="10" top="147" bottom="174"/>

	<mx:Label text="Cipher Text:" left="10" bottom="146"/>
	<mx:ComboBox id="outputFormat" labelField="@label" bottom="144" left="96" change="displayOutput()">
	<mx:dataProvider>
		<mx:XMLList>
			<item label="Text" value="text"/>
			<item label="Hex" value="hex"/>
			<item label="Base64" value="b64"/>
		</mx:XMLList>
	</mx:dataProvider>
	</mx:ComboBox>
	<mx:TextArea id="output" keyDown="currentResult=null" height="72" right="10" left="10" bottom="66"/>
	<mx:Button click="encrypt()" label="Encrypt" right="94" bottom="144"/>
	<mx:Button click="decrypt()" label="Decrypt" right="10" bottom="144"/>
	
	<mx:Script>
		<![CDATA[
			import com.hurlant.crypto.symmetric.ICipher;
			import com.hurlant.crypto.symmetric.IVMode;
			import com.hurlant.crypto.symmetric.IMode;
			import com.hurlant.crypto.symmetric.NullPad;
			import com.hurlant.crypto.symmetric.PKCS5;
			import com.hurlant.crypto.symmetric.IPad;
			import com.hurlant.crypto.prng.Random;
			import com.hurlant.crypto.hash.HMAC;
			import com.hurlant.util.Base64;
			import com.hurlant.util.Hex;
			import com.hurlant.crypto.Crypto;
			import com.hurlant.crypto.hash.IHash;
			
			private var currentInput:ByteArray;
			private var currentResult:ByteArray;

			private function gen(v:int):void {
				keyFormat.selectedIndex=1;
				var r:Random = new Random;
				var b:ByteArray = new ByteArray
				r.nextBytes(b, v/8);
				key.text = Hex.fromArray(b);
			}
			private function genIV():void {
				var name:String = encType.selectedItem.@value+"-"+modeType.selectedItem.@value;
				var mode:ICipher = Crypto.getCipher(name, null);
				var bs:uint = mode.getBlockSize();
				var r:Random = new Random;
				var b:ByteArray = new ByteArray;
				r.nextBytes(b, bs);
				iv.text = Hex.fromArray(b);
				
			}
			
			private function encrypt():void {
				// 2: get a key
				var k:String = key.text;
				var kdata:ByteArray;
				var kformat:String = String(keyFormat.selectedItem.@value);
				switch (kformat) {
					case "hex": kdata = Hex.toArray(k); break;
					case "b64": kdata = Base64.decodeToByteArray(k); break;
					default:
						kdata = Hex.toArray(Hex.fromString(k));
				}
				// 3: get an input
				var txt:String = input.text;
				var data:ByteArray;
				var format:String = String(inputFormat.selectedItem.@value);
				switch (format) {
					case "hex": data = Hex.toArray(txt); break;
					case "b64": data = Base64.decodeToByteArray(txt); break;
					default:
						data = Hex.toArray(Hex.fromString(txt));
				}
				// 1: get an algorithm..
				var name:String = encType.selectedItem.@value+"-"+modeType.selectedItem.@value;
				if (simple.selected) {
					name = "simple-"+name;
				}
				
				var pad:IPad = paddingType.selectedItem.@value.toString()=="pkcs5"?new PKCS5:new NullPad;
				var mode:ICipher = Crypto.getCipher(name, kdata, pad);
				pad.setBlockSize(mode.getBlockSize());
				mode.encrypt(data);
				currentResult = data;
				displayOutput();
				// populate IV.
				if (mode is IVMode) {
					var ivmode:IVMode = mode as IVMode;
					iv.text= Hex.fromArray(ivmode.IV);
				}
			}
			private function  decrypt():void {
				// 2: get a key
				var k:String = key.text;
				var kdata:ByteArray;
				var kformat:String = String(keyFormat.selectedItem.@value);
				switch (kformat) {
					case "hex": kdata = Hex.toArray(k); break;
					case "b64": kdata = Base64.decodeToByteArray(k); break;
					default:
						kdata = Hex.toArray(Hex.fromString(k));
				}
				// 3: get an output
				var txt:String = output.text;
				var data:ByteArray;
				var format:String = String(outputFormat.selectedItem.@value);
				switch (format) {
					case "hex": data = Hex.toArray(txt); break;
					case "b64": data = Base64.decodeToByteArray(txt); break;
					default:
						data = Hex.toArray(Hex.fromString(txt));
				}
				// 1: get an algorithm..
				var name:String = encType.selectedItem.@value+"-"+modeType.selectedItem.@value;
				if (simple.selected) {
					name = "simple-"+name;
				}
				
				var pad:IPad = paddingType.selectedItem.@value.toString()=="pkcs5"?new PKCS5:new NullPad;
				var mode:ICipher = Crypto.getCipher(name, kdata, pad);
				pad.setBlockSize(mode.getBlockSize());
				// if an IV is there, set it.
				if (mode is IVMode) {
					var ivmode:IVMode = mode as IVMode;
					ivmode.IV = Hex.toArray(iv.text);
				}
				mode.decrypt(data);
				currentInput = data;
				displayInput();
				
			}
			
 			private function displayInput():void {
				if (currentInput==null) return;
				var txt:String;
				var format:String = String(inputFormat.selectedItem.@value);
				switch (format) {
					case "hex": txt = Hex.fromArray(currentInput); break;
					case "b64": txt = Base64.encodeByteArray(currentInput); break;
					default:
						txt = Hex.toString(Hex.fromArray(currentInput)); break;
				}
				input.text = txt;
 			}
			private function displayOutput():void {
				if (currentResult==null) return;
				var txt:String;
				var format:String = String(outputFormat.selectedItem.@value);
				switch (format) {
					case "hex": txt = Hex.fromArray(currentResult); break;
					case "b64": txt = Base64.encodeByteArray(currentResult); break;
					default:
						txt = Hex.toString(Hex.fromArray(currentResult)); break;
				}
				output.text = txt;
			}
		]]>
	</mx:Script>
	<mx:Label text="( Leave empty to encrypt )" right="10" bottom="40" id="iv_blah"/>
</mx:Canvas>
